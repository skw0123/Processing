# 프로세싱 강의 1편

---

## 프로세싱

- Ben Fry와 Casey Reas가 2001년에 처음 공개한 오픈소스 프로그래밍 언어
- 기본적으로 “Java”베이스의 언어를 사용
    - 프로세싱에서 “Java”의 모든 명령어 사용 가능
- 디자이너 또는 비주얼 아티스트를 위해 소프트웨어 (비주얼프로그래밍랭귀지)
    
    → 명령어들이 화면 상에 그리는 것에 초점
    

---

## **프로세싱, 다른 프로그래밍 환경**

- **프로그래밍 환경 변경**
    - 프로세싱에서 프레임워크로 전환 → 성능 향상 가능
    - 프로젝트 결과물 최적화
- **다양한 프로그래밍 환경**
    - 오픈프레임워크와 비슷한 기능의 머신, 터치 디자이너 등의 소프트웨어 존재
    - 주로 시각적인 요소, 비주얼 프로그래밍 방식 채택
- **비주얼 프로그래밍 언어**
    - 비주얼 프로그래밍 언어란? : 블록을 조합하여 코딩하는 방식
    - 과거: 스트레치나 엔트리 등 유명
    - 현재: 맥스, MSP, 퓨어 데이터 등 유명

---

## **리눅스 및 오픈 소스 소프트웨어**

- **OS의 다양성**
    - 맥 OS, 윈도우, 리눅스 등이 대표 OS
    - 리눅스 → 오픈 소스로 개발
- **오픈 소스의 특징**
    - 오픈 소스란? 코드 공개,  다른 사람들이 이를 활용 및 발전시킬 수 있는 구조
    - 소프트웨어 개발, 공유에 유익, 다양한 라이브러리 무료 이용
- **프로세싱과 라이브러리**
    - 다양한 라이브러리 활용, 기능 확장
    - 대부분 필요한 기능 → 라이브러리로 제공

---

## **컴퓨터 그래픽 좌표 체계**

- **좌표 체계 시작점**
    - 좌측 상단: (0, 0)
    - x축: 오른쪽으로 갈수록 값 증가
    - y축: 아래로 내려갈수록 값 증가
- **픽셀**
    - 화면: 정사각형 픽셀들로 구성
    - 고해상도 모니터 사용 시 픽셀의 크기 감소
    - 기본적으로 화면을 픽셀 단위로 구성, 좌측 상단 기준, 픽셀 단위 위치 지정
- **프로세싱 설정**
    - 환경 설정 → 세팅
    - 맥: Preferences
    - 윈도우: Settings

---

## **코딩 글꼴 선택**

- 코딩에는 고정폭 글꼴 적합
- '나눔 고딕 코딩' 글꼴 추천: 한글이 제대로 표시
- **글꼴 설정 방법**
    1. '나눔 고딕 코딩' 글꼴 다운로드
    2. 프로세싱 종료 → 다시 실행
    3. 설정 창 → '나눔고딕 코딩' 글꼴 선택
- **코딩 글꼴의 장점**
    - 숫자 '0'과 영문 대문자 'O'를 구분 간단
    - 숫자 '0'은 사선으로 표시

---

## **컴퓨터 그림 그리기, 프로그래밍**

1. 종이 준비 → 컴퓨터 그림 그릴 때 하나의 요소
2. 화면 크기 결정
    1. `size` 명령어 사용, 화면 크기 설정
        1. 사이즈 명령어 형식: `size(x, y);`
3. 명령어의 끝맺음: `;`, 괄호 안: 매개변수
4. 함수: 컴퓨터에게 명령, 사이즈 명령어: 화면 크기를 설정하는 명령

---

## **프로그래밍 언어의 학습과 레퍼런스**

1. 명령어마다 필요한 매개변수 개수 다양
    1. 레퍼런스(사전) 참조
2. 프로세싱 사이트 레퍼런스: 사용 가능한 명령어 제시
3. 레퍼런스를 통해 필요한 명령어, 사용법 학습

---

## **포인트, 라인, 면 그리기**

1. **점 찍기**: **`point()`** 명령어 사용 → 좌표값을 지정
2. **선 그리기**: **`line()`** 명령어 사용 → 두 점 연결, 직선 그리기
3. **면 그리기**: 다양한 도형, 보통 사각형 또는 다각형 모양

---

## **픽셀 위치에 네모 그리기**

1. **네모 그리기**: **`rect()`** 명령어 사용→ 좌표, 너비, 높이 지정
    - 매개변수: x좌표, y좌표, 너비, 높이
        - 예시: **`rect(200, 100, 250, 250)`**

---

# **프로세싱 2D 기본 도**형 그리기

1. **기본 도형 명령어**
    - point: 점
    - rect: 직사각형
    - arc: 호
    - circle: 원
    - ellipse: 타원
    - quad: 사각형
    - square: 정사각형
    - triangle: 삼각형
    - polygon: 다각형
2. **명령어 사용법**
    - 다양한 매개변수 필요
    - ellipse: 중심점, 너비, 높이 지정
3. **실행 순서**
    - 위에서 아래로 순차적 실행
    - 창을 만들고, 점을 찍고, 선과 도형 그리기
    - 겹치는 도형: 순서 조절 후 처리

---

## **색상 지정**

1. **색상 지정**
    - 숫자 하나만 입력하여 색상 지정
    - `stroke`명령어: 외곽선 색상 변경
2. **색상 변경**
    - 그림을 그리기 전 색상 선택
3. **색상 값 범위**
    - 0~255 사이 숫자 입력, 색상 지정
    - 이는 컴퓨터가 색상을 8비트 단위로 계산하기 때문임.
4. **색상 값 이해**
    - 0~255 숫자는 이진수로 표현
    - 비트 조합, 다양한 색 표현
5. **컴퓨터 색상 처리 방식**
    - 8비트 단위로 계산
    - 0~255 사이 숫자로 색상 지정
6. **색상 값 의미**
    - 0은 검정색, 255는 흰색
    - 중간 값: 회색

---

## **색상 변경 방법**

- **외곽선 색상 변경**
    - **`stroke()`** 명령어 사용
    - 하나의 매개 변수: 그레이 스케일 색상, 세 개의 매개 변수: RGB 색상 지정
- **내부 면의 색상 변경**
    - **`fill()`** 명령어 사용
    - 하나의 매개 변수: 그레이 스케일 색상, 세 개의 매개 변수: RGB 색상 지정
- **색상 선택 방법**
    - 색상 선택 창 통해 색상 선택
    - 선택한 색상의 RGB 값을 **`stroke()`** 또는 **`fill()`** 명령어에 입력

---

## **색상과 투명도 설정 방법**

- **선 색상, 투명도 설정**
    - **`stroke()`** 명령어: 선 색상, 투명도 지정
    - **`noStroke()`** 명령어: 외곽선 삭제 가능
- **면 색상, 투명도 설정**
    - **`fill()`** 명령어: 면 색상, 투명도 지정
    - **`noFill()`** 명령어: 면 삭제 가능

---

## **프로세싱 프로그래밍 기본 구조**

1. **`setup()`** **함수**: 프로그램 초기 설정 및 준비 단계 처리 함수
    - 프로그램 실행 시 한 번만 실행
    - 화면 크기 설정 등 초기화 작업 수행
2. **`draw()`** **함수**: 그림 그리기 및 반복 작업 처리 함수
    - 프로그램 실행 후 계속 반복 실행
    - 주로 그림 그리기, 반복 작업 등 수행
3. **프로그램 실행 흐름**
    - **`setup()`** 함수: 프로그램 시작 시 한 번 실행, 초기화 작업 수행
    - **`draw()`** 함수: 프로그램 실행되는 동안 반복 실행, 그림 그리기 & 반복 작업 처리
4. **반복 작업**
    - 그림을 그리거나 반복 작업 처리: **`draw()`** 함수 내부에 코드 작성
    - 필요한 경우 반복 작업을 처리하는 코드를 중괄호로 묶어 구분
