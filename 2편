# 프로세싱 강의 2편

---

## **도형 그리기**

- **`Triangle`**: 점 3개 연결, 삼각형 그리는 함수
    - 매개변수: 각 점의 x, y 좌표
- **`Quad`**: 점 4개 연결, 사각형 그리는 함수
    - **`Line`** 함수와 유사, 하지만 점 4개

---

## **도형 그리기 명령어 비교**

- **Ellipse, Circle**
    - **`Ellipse`**: 타원 그리는 명령어, 중심점의 x좌표, y좌표, 너비, 높이 입력
    - **`Circle`**: 원 그리는 명령어, 중심점의 x좌표, y좌표, 반지름 입력
- **Square, Rect**
    - **`Square`**: 정사각형 그리는 명령어, 중심점의 x 좌표, y 좌표, 한 변 길이 입력
    - **`Rect`**: 사각형 그리는 명령어, 중심점의 x좌표, y좌표, 너비, 높이 입력

---

## **비긴 쉐이프 앤드 쉘(Begin Shape, End Shape)**

- **비긴 쉐이프(Begin Shape)**: 그림 그리기 시작할 때 사용
- **엔드 쉐이프(End Shape)**: 그림 그리기 종료할 때 사용

---

## 색상 선택과 코딩 프로세싱에 관한 설명

- **HSB 색상 선택 방법**: 색상, 채도, 명도 조절해 색상 선택
- **'컬러 모드' 명령어 사용**: RGB 또는 HSB 중 하나 선택해 색상 선택
- RGB로 빨간색 선택, HSB로 변환 → 채도, 명도 조절해 다른 색상 선택 가능
- H값 → 360도, 채도, 명도 → 0~99 사이의 값 보유
- 코드 사용해 도형 그림 생성: '마우스x'와 '마우스y' 사용해 마우스 위치 따른 도형 생성

---

## 프로세싱으로 실시간 그림 그리기: 마우스 인터랙션을 통한 선 연결 프로그램

- 기존 코드를 분석한 결과, 현재의 프로그램은 다음 순서로 작동
    1. 흰색으로 그리고, 지우면서, 그리고, 60초 대기
    2. 흰색으로 그리고, 치우고, 다시 60초 대기
    3. 이 과정 반복
- 원하는 동작은 다음과 같음
    1. 이전에 그려진 그림을 반투명하게 지운 후 흰색으로 그림
    2. 마우스 이동에 따라 선 연결되는 프로그램 제작
- 이를 위해 코드를 수정하고 실행, 원하는 동작이 완성. 코드는 매우 간단함
    1. 윈도우를 생성하고, 흰색으로 지우고 그림을 그리며, 60프레임/초로 동작
    2. 마우스의 위치를 기반으로 이전 위치부터 현재 위치까지 선을 연결
- 현재는 원 작성 중, 마우스 이동이 빠르면 선이 끊기는 현상이 발생
- 이를 보완하기 위해, 마우스 이동에 따라 선이 연결되도록 수정
- 프로세싱으로 이 프로그램을 만들 때 주의할 점
    - 코드의 간결성, 가독성 유지
    - 프레임 레이트에 따라 마우스 이동에 따라 그려지는 선의 부드러움 변화

---

## **마우스 위치에 따라 동적으로 점 이동**

1. **코드 개요**
    - 마우스 위치에 따라 다양한 위치에 점 작성, 이동시키는 역할
    
2. **주요 기능**
    - 점들은 마우스 위치 기준, 상대적 위치 따라 이동
    - 각 점은 마우스 위치와 일정한 거리만큼 떨어진 위치 작성
    - 마우스의 위치와 상대적인 거리는 코드 통해 계산
3. **코드 설명**
    - 코드 내 마우스 위치 기준, 점들의 상대적인 위치 계산하는 과정이 주석으로 설명
    - 마우스 위치와 상대적인 거리 계산 위해 각 점의 초기 위치에 일정한 값 더하거나 빼는 방식
4. **동작 확인**
    - 코드를 실행하면 마우스를 움직일 때마다 점들이 마우스 위치 기준으로 이동
    - 마우스를 움직이는 동안 각 점의 위치가 동적으로 변화하는 것 확인

---

## 4층 연산 이용 애니메이션

1. 4층 연산에 대한 학습 후 애니메이션 제작을 시작함
2. 배경 검정색 설정, 화면 좌측 상단에 원 작성
3. 원을 오른쪽으로 이동시키는 애니메이션을 만들기 위해 변수 필요
4. 변수는 고정된 숫자 대신해 변화하는 값
5. 변수 이름은 사용자가 선택, 해당 값이 마우스의 x좌표와 같이 변화하도록 설정

---

## 변수와 정수값 컴퓨터 메모리에서 저장하는 방법

1. x포지션 변수 생성해 정수 저장, 이 변수는 화면의 x좌표 표현
2. x포지션 변수 사용해 값 변경 및 활용
3. int키워드를 사용해 해당 변수가 정수 저장한다는 것 명시
4. 처음에는 0으로 초기화, 프로그램 실행 중 필요 따라 값 변경
5. 변수 사용해 화면의 픽셀 위치 제어, 위치 변경함으로 애니메이션 효과

---

## **프로그래밍 변수 이름 설정 규칙과 시스템 변수 활용**

- 초반에 플로트 변수 많이 활용
- 불리언 변수는 컴퓨터에서 가장 기본, 참과 거짓 저장
- 자바 변수 -128~127까지의 값을 저장, 캐릭터 변수 문자 하나 저장
- 더블 변수는 플로트와 유사, 큰 의미가 없어 넘어가고, 롱 변수는 더 넓은 범위의 정수 저장
- 주로 플로트 변수 사용, 코딩 시작

---

## 화면 중간 이동 후, 랜덤 밝기 색 지정하기

- 화면 중앙 요소 배치할 때 시스템 변수 활용해 윈도우 크기 관계없이 자동으로 중앙에 위치하도록 코드 작성
- 색상 지정할 때 색상 채도, 명도를 활용, 명도 값 랜덤으로 변경하여 다양한 효과를 표현
- 랜덤 함수 사용할 때 0~255사이 값을 생성해 밝기 값 조절
- 요소가 화면 따라 이동하면서 색상, 밝기가 랜덤하게 변하는 효과 구현
- 랜덤 함수는 다양한 상황에 유용하게 활용

---

## **프로세싱에서 조건문을 활용한 마우스 위치에 따른 색상 변경**

### **프로세싱에서 조건문 사용하기**

- **조건문 소개**
    - 조건문은 특정한 상황에서만 실행되는 코드를 작성할 때 사용됩니다.
    - 조건문은 불리언(boolean) 변수와 밀접한 연관이 있습니다.
    - 프로세싱에서 참은 **`true`**, 거짓은 **`false`**로 표현됩니다.
- **기본 문법**
    - **`if (조건) { 실행 코드 }`**: 조건이 참일 경우에만 실행됩니다.
    - **`else { 실행 코드 }`**: 조건이 거짓일 경우 실행됩니다.
- **첫 번째 예시: 마우스 위치에 따라 배경 색 변경**
    - **`if (마우스 x > 250) { 배경 색 = 흰색; }`**: 마우스 x 위치가 250보다 큰 경우 배경 색을 흰색으로 변경합니다.
    - **`else { 배경 색 = 검정색; }`**: 그 외의 경우에는 배경 색을 검정색으로 변경합니다.
- **두 번째 예시: 마우스 위치에 따라 다양한 색 적용**
    - 조건을 더 세분화하여 마우스 위치에 따라 검정, 회색, 파랑 색을 적용합니다.
    - **`if (마우스 x < 전체 너비의 3분의 1) { 배경 색 = 검정색; }`**
    - **`else if (마우스 x < 전체 너비의 3분의 2) { 배경 색 = 회색; }`**
    - **`else { 배경 색 = 파랑; }`**: 마우스 위치에 따라 다양한 색이 적용됩니다.
- **코드 작성 시 주의할 점**
    - **`if`**문 안의 코드가 참이 아닌 경우에는 해당 코드가 실행되지 않습니다.
    - 즉, **`if`**문 안의 조건이 참일 때만 실행되는 코드를 작성해야 합니다.

---

## **프로세싱에서 조건문을 활용한 구조화된 코드 작성하기**

### **프로세싱에서 조건문을 사용한 코드 정리**

- **중요한 부분 강조**
    - 코드 정렬을 통해 코드의 구조를 명확히 확인할 수 있습니다.
    - 코드의 일관된 들여쓰기는 가독성을 향상시킵니다.
    - 주석을 추가하여 코드의 각 부분이 어떤 역할을 하는지 설명해야 합니다.
- **조건문의 올바른 사용**
    - **`if-else`** 구문을 사용하여 마우스 위치에 따라 배경 색을 변경하는 예시를 보여줍니다.
    - 적절한 들여쓰기와 주석을 통해 코드를 명확하게 설명합니다.
- **코드 구조화**
    - 코드를 여러 단계로 분할하여 가독성을 높입니다.
    - 예시로는 마우스 위치에 따라 다섯 단계의 색상을 적용하는 코드를 제시합니다.
- **추가적인 팁**
    - 코드를 읽고 수정할 때는 항상 코드 정렬을 사용하세요.
    - 들여쓰기와 주석을 통해 코드의 의도를 명확히 전달하세요.
    - 여러 개의 조건문을 사용하여 복잡한 작업을 수행할 수 있습니다.

---

## **프로세싱에서 조건문을 활용한 코드의 가독성과 구조화**

### **프로세싱에서 조건문을 사용한 코드 정리**

- **구조화된 코드**
    - 코드 구조화해 가독성 증가
    - 정렬된 코드와 일관된 들여쓰기 사용
- **주석을 활용한 설명**
    - 각 코드 블록에 주석 추가, 코드 의도 명확히 전달
    - 코드 각 부분이 어떤 역할 하는지 설명
- **조건문의 활용**
    - 마우스 위치 따라 배경 색을 변경하는 조건문 예시로 제시
    - 조건문 사용해 다양한 상황 대응
- **코드의 분할**
    - 코드를 여러 단계로 나누어 복잡성 감소
    - 다섯 단계의 색상 적용하는 예시 통해 코드 설명
- **유용한 팁**
    - 코드 수정할 때 항상 코드 정렬 사용
    - 코드 가독성 높이기 위해 들여쓰기, 주석 적절히 활용

---

## **프로세싱에서 조건문과 비교 연산자의 활용**

### **프로세싱에서의 조건문 활용과 비교 연산자**

- **조건문의 다양한 활용**
    - **`if-else`** 구문 사용해 다양한 상황 대응
    - 마우스 위치 따라 배경 색 변경 예시 제시
- **비교 연산자의 활용**
    - 프로세싱 레퍼런스 페이지에 제공되는 비교 연산자 설명
    - **`==`**, **`!=`**, **`<`**, **`<=`**, **`>`**, **`>=`** 연산자 사용해 값 비교
- **비교 연산자의 종류**
    - 두 값이 같은지, 다른지, 작은지, 작거나 같은지, 큰지, 크거나 같은지 확인
    - 연산자 활용해 조건문 구성
- **논리 연산자의 활용**
    - **`&&`**와 **`||`**를 사용하여 여러 조건 결합
    - 조건문을 보다 복잡하게 구성
- **코드 작성 예시**
    - 마우스 위치 따라 화면 네 영역으로 분할, 각 영역에 따라 다른 배경 색상 적용하는 코드 작성

---

## **변수를 사용한 반복문**

```java
javaCopy code
void setup() {
  size(500, 500);
  background(255);
  strokeWeight(10);

  float x = 20; // x 좌표 변수 초기화

  while (x < 500) { // x 좌표가 500 미만인 동안 반복
    p(x, 20); // 점 찍기
    x += 20; // x 좌표를 20만큼 증가
  }
}

void p(float x, float y) {
  point(x, y); // 점 찍기
}

```

### **변수를 사용한 반복문 설명**

- **`setup()`** 함수
    - 화면 크기를 500x500으로 설정
    - 배경을 흰색(255)으로 설정
    - 선의 굵기 10으로 설정
- 변수 **`x`**
    - **`float`** 형식으로 선언
    - 초기값은 20으로 설정
    - 이 변수를 사용하여 점의 x 좌표 계속 변경
- **`while`** 반복문
    - **`x`** 좌표가 500 미만일 때까지 반복
    - 각 반복에서 **`x`** 좌표를 20씩 증가시켜 20픽셀 간격으로 점 작성
- **`p()`** 함수
    - 주어진 좌표에 점 찍는 함수

### **변수를 사용한 반복문 결과**

- 이 코드를 실행하면, x 좌표가 20부터 시작해 20씩 증가하며 오른쪽으로 이동하는 점 작성
- 간격 10으로 변경하면 간격이 좁아지는 것 확인

---

## **`for` 반복문을 사용한 점 찍기**

```java
javaCopy code
void setup() {
  size(500, 500);
  background(255);
  strokeWeight(10);

  for (float x = 20; x < 500; x += 20) { // x 좌표가 500 미만인 동안 반복
    point(x, 20); // 점 찍기
  }
}

```

### **`for` 반복문 설명**

- **`setup()`** 함수:
    - 화면 크기를 500x500으로 설정
    - 배경을 흰색(255)으로 설정
    - 선의 굵기를 10으로 설정
- **`for`** 반복문:
    - **`x`** 변수를 선언하고 초기값을 20으로 설정
    - **`x`** 좌표가 500 미만일 때까지 반복
    - 각 반복에서 **`x`** 좌표를 20씩 증가시켜 20픽셀 간격으로 점 작성

### **`for` 반복문 결과**

- **`for`** 반복문을 사용하여 간결하고 가독성이 좋은 코드로 점 작성
- 코드의 의도가 명확하게 드러나며, 반복 횟수를 명시적으로 지정

### **반복문의 활용**

- **`for`** 반복문은 초기값, 조건식, 증감식이 한 줄에 모두 포함되어 있어서 코드를 간결하게 작성
- 초당 60회 반복되는 **`draw()`** 함수를 사용하여도 점 찍을 수 있지만, **`for`** 반복문을 사용하는 것이 코드를 더 간결하게 작성
